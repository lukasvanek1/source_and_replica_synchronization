import argparse # handling comand line arguments, getting users' input
import os  # file and directory ops
import logging # handling files- copy, delete...
import shutil  # files and dir copying
import hashlib  # MD5 checksums generating



# argument parsing for handling files
def parse_arguments():
    parser = argparse.ArgumentParser(description="Sync source and replica folders")
    parser.add_argument('source', help="Source folder path")
    parser.add_argument('replica', help="Replica folder path")
    parser.add_argument('interval', type=int, help="Sync interval in seconds")
    parser.add_argument('logfile', help="Log file path")
    parser.add_argument('--dry-run', action='store_true', help="Perform a trial run with no changes made")
    return parser.parse_args()

# logging operations @ file&console
def setup_logging(logfile):
    logging.basicConfig(
        filename=logfile,
        level=logging.INFO,
        format='%(asctime)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        filemode='a'
    )
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
    console_handler.setFormatter(formatter)
    logging.getLogger().addHandler(console_handler)

#  MD5 checksum of a file calculation
def calculate_md5(file_path, block_size=8192):
    md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(block_size), b""):
            md5.update(chunk)
    return md5.hexdigest()

# synchronizing the source & replica folders
def sync_folders(source, replica, dry_run=False):
    if not os.path.exists(replica):
        os.mkdir(replica)
        print(f"Replica folder created: {replica}")

    for root, dirs, files in os.walk(source):
        for file in files:
            source_file = os.path.join(root, file)
            replica_file = os.path.join(replica, file)

            if not os.path.exists(replica_file) or os.path.getsize(source_file) != os.path.getsize(replica_file):
                if not dry_run:
                    shutil.copy(source_file, replica_file)
                    print(f"File copied: {source_file} -> {replica_file}")
    for root, dirs, files in os.walk(replica):
        for file in files:
            replica_file = os.path.join(root, file)
            source_file = os.path.join(source, file)
            if not os.path.exists(source_file):
                os.remove(replica_file)
                print(f"File removed: {replica_file}")
